// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("transfer", id.toString(), this);
  }

  static load(id: string): transfer | null {
    return store.get("transfer", id) as transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get send(): string | null {
    let value = this.get("send");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set send(value: string | null) {
    if (value === null) {
      this.unset("send");
    } else {
      this.set("send", Value.fromString(value as string));
    }
  }

  get receive(): string | null {
    let value = this.get("receive");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receive(value: string | null) {
    if (value === null) {
      this.unset("receive");
    } else {
      this.set("receive", Value.fromString(value as string));
    }
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class jobAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save jobAdded entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save jobAdded entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("jobAdded", id.toString(), this);
  }

  static load(id: string): jobAdded | null {
    return store.get("jobAdded", id) as jobAdded | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get jobContract(): Bytes | null {
    let value = this.get("jobContract");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set jobContract(value: Bytes | null) {
    if (value === null) {
      this.unset("jobContract");
    } else {
      this.set("jobContract", Value.fromBytes(value as Bytes));
    }
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }
}

export class jobRemoved extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save jobRemoved entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save jobRemoved entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("jobRemoved", id.toString(), this);
  }

  static load(id: string): jobRemoved | null {
    return store.get("jobRemoved", id) as jobRemoved | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get jobContract(): Bytes | null {
    let value = this.get("jobContract");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set jobContract(value: Bytes | null) {
    if (value === null) {
      this.unset("jobContract");
    } else {
      this.set("jobContract", Value.fromBytes(value as Bytes));
    }
  }

  get removeBlock(): BigInt {
    let value = this.get("removeBlock");
    return value.toBigInt();
  }

  set removeBlock(value: BigInt) {
    this.set("removeBlock", Value.fromBigInt(value));
  }
}

export class keeperBonded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save keeperBonded entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save keeperBonded entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("keeperBonded", id.toString(), this);
  }

  static load(id: string): keeperBonded | null {
    return store.get("keeperBonded", id) as keeperBonded | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get keeperAddress(): Bytes | null {
    let value = this.get("keeperAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set keeperAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("keeperAddress");
    } else {
      this.set("keeperAddress", Value.fromBytes(value as Bytes));
    }
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get activatedTimestamp(): BigInt {
    let value = this.get("activatedTimestamp");
    return value.toBigInt();
  }

  set activatedTimestamp(value: BigInt) {
    this.set("activatedTimestamp", Value.fromBigInt(value));
  }

  get bondBalance(): BigInt {
    let value = this.get("bondBalance");
    return value.toBigInt();
  }

  set bondBalance(value: BigInt) {
    this.set("bondBalance", Value.fromBigInt(value));
  }
}

export class keeperBonding extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save keeperBonding entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save keeperBonding entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("keeperBonding", id.toString(), this);
  }

  static load(id: string): keeperBonding | null {
    return store.get("keeperBonding", id) as keeperBonding | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get keeperAddress(): Bytes | null {
    let value = this.get("keeperAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set keeperAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("keeperAddress");
    } else {
      this.set("keeperAddress", Value.fromBytes(value as Bytes));
    }
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get activeTimestamp(): BigInt {
    let value = this.get("activeTimestamp");
    return value.toBigInt();
  }

  set activeTimestamp(value: BigInt) {
    this.set("activeTimestamp", Value.fromBigInt(value));
  }

  get bondBalance(): BigInt {
    let value = this.get("bondBalance");
    return value.toBigInt();
  }

  set bondBalance(value: BigInt) {
    this.set("bondBalance", Value.fromBigInt(value));
  }
}

export class info extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save info entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save info entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("info", id.toString(), this);
  }

  static load(id: string): info | null {
    return store.get("info", id) as info | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalAddJobs(): BigInt {
    let value = this.get("totalAddJobs");
    return value.toBigInt();
  }

  set totalAddJobs(value: BigInt) {
    this.set("totalAddJobs", Value.fromBigInt(value));
  }

  get totalRemoveJobs(): BigInt {
    let value = this.get("totalRemoveJobs");
    return value.toBigInt();
  }

  set totalRemoveJobs(value: BigInt) {
    this.set("totalRemoveJobs", Value.fromBigInt(value));
  }

  get totalCurrentJobs(): BigInt {
    let value = this.get("totalCurrentJobs");
    return value.toBigInt();
  }

  set totalCurrentJobs(value: BigInt) {
    this.set("totalCurrentJobs", Value.fromBigInt(value));
  }
}
