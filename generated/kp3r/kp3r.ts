// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCredit extends ethereum.Event {
  get params(): AddCredit__Params {
    return new AddCredit__Params(this);
  }
}

export class AddCredit__Params {
  _event: AddCredit;

  constructor(event: AddCredit) {
    this._event = event;
  }

  get credit(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get job(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get creditor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ApplyCredit extends ethereum.Event {
  get params(): ApplyCredit__Params {
    return new ApplyCredit__Params(this);
  }
}

export class ApplyCredit__Params {
  _event: ApplyCredit;

  constructor(event: ApplyCredit) {
    this._event = event;
  }

  get job(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidity(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get provider(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get credit(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateVotesChanged extends ethereum.Event {
  get params(): DelegateVotesChanged__Params {
    return new DelegateVotesChanged__Params(this);
  }
}

export class DelegateVotesChanged__Params {
  _event: DelegateVotesChanged;

  constructor(event: DelegateVotesChanged) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class JobAdded extends ethereum.Event {
  get params(): JobAdded__Params {
    return new JobAdded__Params(this);
  }
}

export class JobAdded__Params {
  _event: JobAdded;

  constructor(event: JobAdded) {
    this._event = event;
  }

  get job(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get governance(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class JobRemoved extends ethereum.Event {
  get params(): JobRemoved__Params {
    return new JobRemoved__Params(this);
  }
}

export class JobRemoved__Params {
  _event: JobRemoved;

  constructor(event: JobRemoved) {
    this._event = event;
  }

  get job(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get governance(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class KeeperBonded extends ethereum.Event {
  get params(): KeeperBonded__Params {
    return new KeeperBonded__Params(this);
  }
}

export class KeeperBonded__Params {
  _event: KeeperBonded;

  constructor(event: KeeperBonded) {
    this._event = event;
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get activated(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bond(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class KeeperBonding extends ethereum.Event {
  get params(): KeeperBonding__Params {
    return new KeeperBonding__Params(this);
  }
}

export class KeeperBonding__Params {
  _event: KeeperBonding;

  constructor(event: KeeperBonding) {
    this._event = event;
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get active(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bond(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class KeeperDispute extends ethereum.Event {
  get params(): KeeperDispute__Params {
    return new KeeperDispute__Params(this);
  }
}

export class KeeperDispute__Params {
  _event: KeeperDispute;

  constructor(event: KeeperDispute) {
    this._event = event;
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class KeeperResolved extends ethereum.Event {
  get params(): KeeperResolved__Params {
    return new KeeperResolved__Params(this);
  }
}

export class KeeperResolved__Params {
  _event: KeeperResolved;

  constructor(event: KeeperResolved) {
    this._event = event;
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class KeeperSlashed extends ethereum.Event {
  get params(): KeeperSlashed__Params {
    return new KeeperSlashed__Params(this);
  }
}

export class KeeperSlashed__Params {
  _event: KeeperSlashed;

  constructor(event: KeeperSlashed) {
    this._event = event;
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get slasher(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get slash(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class KeeperUnbonding extends ethereum.Event {
  get params(): KeeperUnbonding__Params {
    return new KeeperUnbonding__Params(this);
  }
}

export class KeeperUnbonding__Params {
  _event: KeeperUnbonding;

  constructor(event: KeeperUnbonding) {
    this._event = event;
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get deactive(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bond(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class KeeperUnbound extends ethereum.Event {
  get params(): KeeperUnbound__Params {
    return new KeeperUnbound__Params(this);
  }
}

export class KeeperUnbound__Params {
  _event: KeeperUnbound;

  constructor(event: KeeperUnbound) {
    this._event = event;
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get deactivated(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bond(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class KeeperWorked extends ethereum.Event {
  get params(): KeeperWorked__Params {
    return new KeeperWorked__Params(this);
  }
}

export class KeeperWorked__Params {
  _event: KeeperWorked;

  constructor(event: KeeperWorked) {
    this._event = event;
  }

  get credit(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get job(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get keeper(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RemoveJob extends ethereum.Event {
  get params(): RemoveJob__Params {
    return new RemoveJob__Params(this);
  }
}

export class RemoveJob__Params {
  _event: RemoveJob;

  constructor(event: RemoveJob) {
    this._event = event;
  }

  get job(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidity(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get provider(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get credit(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SubmitJob extends ethereum.Event {
  get params(): SubmitJob__Params {
    return new SubmitJob__Params(this);
  }
}

export class SubmitJob__Params {
  _event: SubmitJob;

  constructor(event: SubmitJob) {
    this._event = event;
  }

  get job(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidity(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get provider(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get credit(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnbondJob extends ethereum.Event {
  get params(): UnbondJob__Params {
    return new UnbondJob__Params(this);
  }
}

export class UnbondJob__Params {
  _event: UnbondJob;

  constructor(event: UnbondJob) {
    this._event = event;
  }

  get job(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidity(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get provider(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get block(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get credit(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class kp3r__checkpointsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class kp3r extends ethereum.SmartContract {
  static bind(address: Address): kp3r {
    return new kp3r("kp3r", address);
  }

  BASE(): BigInt {
    let result = super.call("BASE", "BASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE", "BASE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BOND(): BigInt {
    let result = super.call("BOND", "BOND():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BOND(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BOND", "BOND():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DELEGATION_TYPEHASH(): Bytes {
    let result = super.call(
      "DELEGATION_TYPEHASH",
      "DELEGATION_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DELEGATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DELEGATION_TYPEHASH",
      "DELEGATION_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAINSEPARATOR(): Bytes {
    let result = super.call(
      "DOMAINSEPARATOR",
      "DOMAINSEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAINSEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAINSEPARATOR",
      "DOMAINSEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ETH(): Address {
    let result = super.call("ETH", "ETH():(address)", []);

    return result[0].toAddress();
  }

  try_ETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("ETH", "ETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FEE(): BigInt {
    let result = super.call("FEE", "FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FEE", "FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  KPRH(): Address {
    let result = super.call("KPRH", "KPRH():(address)", []);

    return result[0].toAddress();
  }

  try_KPRH(): ethereum.CallResult<Address> {
    let result = super.tryCall("KPRH", "KPRH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LIQUIDITYBOND(): BigInt {
    let result = super.call("LIQUIDITYBOND", "LIQUIDITYBOND():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LIQUIDITYBOND(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LIQUIDITYBOND",
      "LIQUIDITYBOND():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UNBOND(): BigInt {
    let result = super.call("UNBOND", "UNBOND():(uint256)", []);

    return result[0].toBigInt();
  }

  try_UNBOND(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("UNBOND", "UNBOND():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(account: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    account: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blacklist(param0: Address): boolean {
    let result = super.call("blacklist", "blacklist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_blacklist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("blacklist", "blacklist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  bondings(param0: Address, param1: Address): BigInt {
    let result = super.call("bondings", "bondings(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_bondings(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bondings",
      "bondings(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bonds(param0: Address, param1: Address): BigInt {
    let result = super.call("bonds", "bonds(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_bonds(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bonds", "bonds(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkpoints(param0: Address, param1: BigInt): kp3r__checkpointsResult {
    let result = super.call(
      "checkpoints",
      "checkpoints(address,uint32):(uint32,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new kp3r__checkpointsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_checkpoints(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<kp3r__checkpointsResult> {
    let result = super.tryCall(
      "checkpoints",
      "checkpoints(address,uint32):(uint32,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new kp3r__checkpointsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  credits(param0: Address, param1: Address): BigInt {
    let result = super.call("credits", "credits(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_credits(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "credits",
      "credits(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  delegates(param0: Address): Address {
    let result = super.call("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_delegates(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  disputes(param0: Address): boolean {
    let result = super.call("disputes", "disputes(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_disputes(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("disputes", "disputes(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  firstSeen(param0: Address): BigInt {
    let result = super.call("firstSeen", "firstSeen(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_firstSeen(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("firstSeen", "firstSeen(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentVotes(account: Address): BigInt {
    let result = super.call(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentVotes(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getJobs(): Array<Address> {
    let result = super.call("getJobs", "getJobs():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getJobs(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getJobs", "getJobs():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getKeepers(): Array<Address> {
    let result = super.call("getKeepers", "getKeepers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getKeepers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getKeepers", "getKeepers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPriorVotes(account: Address, blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPriorVotes",
      "getPriorVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPriorVotes(
    account: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriorVotes",
      "getPriorVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isBondedKeeper(
    keeper: Address,
    bond: Address,
    minBond: BigInt,
    earned: BigInt,
    age: BigInt
  ): boolean {
    let result = super.call(
      "isBondedKeeper",
      "isBondedKeeper(address,address,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(keeper),
        ethereum.Value.fromAddress(bond),
        ethereum.Value.fromUnsignedBigInt(minBond),
        ethereum.Value.fromUnsignedBigInt(earned),
        ethereum.Value.fromUnsignedBigInt(age)
      ]
    );

    return result[0].toBoolean();
  }

  try_isBondedKeeper(
    keeper: Address,
    bond: Address,
    minBond: BigInt,
    earned: BigInt,
    age: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBondedKeeper",
      "isBondedKeeper(address,address,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(keeper),
        ethereum.Value.fromAddress(bond),
        ethereum.Value.fromUnsignedBigInt(minBond),
        ethereum.Value.fromUnsignedBigInt(earned),
        ethereum.Value.fromUnsignedBigInt(age)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isKeeper(keeper: Address): boolean {
    let result = super.call("isKeeper", "isKeeper(address):(bool)", [
      ethereum.Value.fromAddress(keeper)
    ]);

    return result[0].toBoolean();
  }

  try_isKeeper(keeper: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isKeeper", "isKeeper(address):(bool)", [
      ethereum.Value.fromAddress(keeper)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMinKeeper(
    keeper: Address,
    minBond: BigInt,
    earned: BigInt,
    age: BigInt
  ): boolean {
    let result = super.call(
      "isMinKeeper",
      "isMinKeeper(address,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(keeper),
        ethereum.Value.fromUnsignedBigInt(minBond),
        ethereum.Value.fromUnsignedBigInt(earned),
        ethereum.Value.fromUnsignedBigInt(age)
      ]
    );

    return result[0].toBoolean();
  }

  try_isMinKeeper(
    keeper: Address,
    minBond: BigInt,
    earned: BigInt,
    age: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMinKeeper",
      "isMinKeeper(address,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(keeper),
        ethereum.Value.fromUnsignedBigInt(minBond),
        ethereum.Value.fromUnsignedBigInt(earned),
        ethereum.Value.fromUnsignedBigInt(age)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  jobList(param0: BigInt): Address {
    let result = super.call("jobList", "jobList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_jobList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("jobList", "jobList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  jobProposalDelay(param0: Address): BigInt {
    let result = super.call(
      "jobProposalDelay",
      "jobProposalDelay(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_jobProposalDelay(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "jobProposalDelay",
      "jobProposalDelay(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  jobs(param0: Address): boolean {
    let result = super.call("jobs", "jobs(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_jobs(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("jobs", "jobs(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeperList(param0: BigInt): Address {
    let result = super.call("keeperList", "keeperList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_keeperList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("keeperList", "keeperList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  keepers(param0: Address): boolean {
    let result = super.call("keepers", "keepers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_keepers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("keepers", "keepers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastJob(param0: Address): BigInt {
    let result = super.call("lastJob", "lastJob(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_lastJob(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastJob", "lastJob(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityAccepted(param0: Address): boolean {
    let result = super.call(
      "liquidityAccepted",
      "liquidityAccepted(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_liquidityAccepted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "liquidityAccepted",
      "liquidityAccepted(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidityAmount(param0: Address, param1: Address, param2: Address): BigInt {
    let result = super.call(
      "liquidityAmount",
      "liquidityAmount(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidityAmount(
    param0: Address,
    param1: Address,
    param2: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityAmount",
      "liquidityAmount(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityAmountsUnbonding(
    param0: Address,
    param1: Address,
    param2: Address
  ): BigInt {
    let result = super.call(
      "liquidityAmountsUnbonding",
      "liquidityAmountsUnbonding(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidityAmountsUnbonding(
    param0: Address,
    param1: Address,
    param2: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityAmountsUnbonding",
      "liquidityAmountsUnbonding(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityApplied(param0: Address, param1: Address, param2: Address): BigInt {
    let result = super.call(
      "liquidityApplied",
      "liquidityApplied(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidityApplied(
    param0: Address,
    param1: Address,
    param2: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityApplied",
      "liquidityApplied(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityPairs(param0: BigInt): Address {
    let result = super.call(
      "liquidityPairs",
      "liquidityPairs(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_liquidityPairs(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityPairs",
      "liquidityPairs(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityProvided(param0: Address, param1: Address, param2: Address): BigInt {
    let result = super.call(
      "liquidityProvided",
      "liquidityProvided(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidityProvided(
    param0: Address,
    param1: Address,
    param2: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityProvided",
      "liquidityProvided(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityUnbonding(
    param0: Address,
    param1: Address,
    param2: Address
  ): BigInt {
    let result = super.call(
      "liquidityUnbonding",
      "liquidityUnbonding(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidityUnbonding(
    param0: Address,
    param1: Address,
    param2: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityUnbonding",
      "liquidityUnbonding(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numCheckpoints(param0: Address): BigInt {
    let result = super.call(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_numCheckpoints(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pairs(): Array<Address> {
    let result = super.call("pairs", "pairs():(address[])", []);

    return result[0].toAddressArray();
  }

  try_pairs(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("pairs", "pairs():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  partialUnbonding(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "partialUnbonding",
      "partialUnbonding(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_partialUnbonding(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "partialUnbonding",
      "partialUnbonding(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingGovernance(): Address {
    let result = super.call(
      "pendingGovernance",
      "pendingGovernance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_pendingGovernance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingGovernance",
      "pendingGovernance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingbonds(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "pendingbonds",
      "pendingbonds(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_pendingbonds(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingbonds",
      "pendingbonds(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBonded(): BigInt {
    let result = super.call("totalBonded", "totalBonded():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBonded(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBonded", "totalBonded():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(dst: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(dst: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(src: Address, dst: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    src: Address,
    dst: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unbondings(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "unbondings",
      "unbondings(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_unbondings(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unbondings",
      "unbondings(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votes(param0: Address): BigInt {
    let result = super.call("votes", "votes(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_votes(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votes", "votes(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  workCompleted(param0: Address): BigInt {
    let result = super.call(
      "workCompleted",
      "workCompleted(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_workCompleted(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "workCompleted",
      "workCompleted(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _kph(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptGovernanceCall extends ethereum.Call {
  get inputs(): AcceptGovernanceCall__Inputs {
    return new AcceptGovernanceCall__Inputs(this);
  }

  get outputs(): AcceptGovernanceCall__Outputs {
    return new AcceptGovernanceCall__Outputs(this);
  }
}

export class AcceptGovernanceCall__Inputs {
  _call: AcceptGovernanceCall;

  constructor(call: AcceptGovernanceCall) {
    this._call = call;
  }
}

export class AcceptGovernanceCall__Outputs {
  _call: AcceptGovernanceCall;

  constructor(call: AcceptGovernanceCall) {
    this._call = call;
  }
}

export class ActivateCall extends ethereum.Call {
  get inputs(): ActivateCall__Inputs {
    return new ActivateCall__Inputs(this);
  }

  get outputs(): ActivateCall__Outputs {
    return new ActivateCall__Outputs(this);
  }
}

export class ActivateCall__Inputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }

  get bonding(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ActivateCall__Outputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }
}

export class AddCreditCall extends ethereum.Call {
  get inputs(): AddCreditCall__Inputs {
    return new AddCreditCall__Inputs(this);
  }

  get outputs(): AddCreditCall__Outputs {
    return new AddCreditCall__Outputs(this);
  }
}

export class AddCreditCall__Inputs {
  _call: AddCreditCall;

  constructor(call: AddCreditCall) {
    this._call = call;
  }

  get credit(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get job(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddCreditCall__Outputs {
  _call: AddCreditCall;

  constructor(call: AddCreditCall) {
    this._call = call;
  }
}

export class AddCreditETHCall extends ethereum.Call {
  get inputs(): AddCreditETHCall__Inputs {
    return new AddCreditETHCall__Inputs(this);
  }

  get outputs(): AddCreditETHCall__Outputs {
    return new AddCreditETHCall__Outputs(this);
  }
}

export class AddCreditETHCall__Inputs {
  _call: AddCreditETHCall;

  constructor(call: AddCreditETHCall) {
    this._call = call;
  }

  get job(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddCreditETHCall__Outputs {
  _call: AddCreditETHCall;

  constructor(call: AddCreditETHCall) {
    this._call = call;
  }
}

export class AddJobCall extends ethereum.Call {
  get inputs(): AddJobCall__Inputs {
    return new AddJobCall__Inputs(this);
  }

  get outputs(): AddJobCall__Outputs {
    return new AddJobCall__Outputs(this);
  }
}

export class AddJobCall__Inputs {
  _call: AddJobCall;

  constructor(call: AddJobCall) {
    this._call = call;
  }

  get job(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddJobCall__Outputs {
  _call: AddJobCall;

  constructor(call: AddJobCall) {
    this._call = call;
  }
}

export class AddKPRCreditCall extends ethereum.Call {
  get inputs(): AddKPRCreditCall__Inputs {
    return new AddKPRCreditCall__Inputs(this);
  }

  get outputs(): AddKPRCreditCall__Outputs {
    return new AddKPRCreditCall__Outputs(this);
  }
}

export class AddKPRCreditCall__Inputs {
  _call: AddKPRCreditCall;

  constructor(call: AddKPRCreditCall) {
    this._call = call;
  }

  get job(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddKPRCreditCall__Outputs {
  _call: AddKPRCreditCall;

  constructor(call: AddKPRCreditCall) {
    this._call = call;
  }
}

export class AddLiquidityToJobCall extends ethereum.Call {
  get inputs(): AddLiquidityToJobCall__Inputs {
    return new AddLiquidityToJobCall__Inputs(this);
  }

  get outputs(): AddLiquidityToJobCall__Outputs {
    return new AddLiquidityToJobCall__Outputs(this);
  }
}

export class AddLiquidityToJobCall__Inputs {
  _call: AddLiquidityToJobCall;

  constructor(call: AddLiquidityToJobCall) {
    this._call = call;
  }

  get liquidity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get job(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddLiquidityToJobCall__Outputs {
  _call: AddLiquidityToJobCall;

  constructor(call: AddLiquidityToJobCall) {
    this._call = call;
  }
}

export class AddVotesCall extends ethereum.Call {
  get inputs(): AddVotesCall__Inputs {
    return new AddVotesCall__Inputs(this);
  }

  get outputs(): AddVotesCall__Outputs {
    return new AddVotesCall__Outputs(this);
  }
}

export class AddVotesCall__Inputs {
  _call: AddVotesCall;

  constructor(call: AddVotesCall) {
    this._call = call;
  }

  get voter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddVotesCall__Outputs {
  _call: AddVotesCall;

  constructor(call: AddVotesCall) {
    this._call = call;
  }
}

export class ApplyCreditToJobCall extends ethereum.Call {
  get inputs(): ApplyCreditToJobCall__Inputs {
    return new ApplyCreditToJobCall__Inputs(this);
  }

  get outputs(): ApplyCreditToJobCall__Outputs {
    return new ApplyCreditToJobCall__Outputs(this);
  }
}

export class ApplyCreditToJobCall__Inputs {
  _call: ApplyCreditToJobCall;

  constructor(call: ApplyCreditToJobCall) {
    this._call = call;
  }

  get provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidity(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get job(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ApplyCreditToJobCall__Outputs {
  _call: ApplyCreditToJobCall;

  constructor(call: ApplyCreditToJobCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveLiquidityCall extends ethereum.Call {
  get inputs(): ApproveLiquidityCall__Inputs {
    return new ApproveLiquidityCall__Inputs(this);
  }

  get outputs(): ApproveLiquidityCall__Outputs {
    return new ApproveLiquidityCall__Outputs(this);
  }
}

export class ApproveLiquidityCall__Inputs {
  _call: ApproveLiquidityCall;

  constructor(call: ApproveLiquidityCall) {
    this._call = call;
  }

  get liquidity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveLiquidityCall__Outputs {
  _call: ApproveLiquidityCall;

  constructor(call: ApproveLiquidityCall) {
    this._call = call;
  }
}

export class BondCall extends ethereum.Call {
  get inputs(): BondCall__Inputs {
    return new BondCall__Inputs(this);
  }

  get outputs(): BondCall__Outputs {
    return new BondCall__Outputs(this);
  }
}

export class BondCall__Inputs {
  _call: BondCall;

  constructor(call: BondCall) {
    this._call = call;
  }

  get bonding(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BondCall__Outputs {
  _call: BondCall;

  constructor(call: BondCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateBySigCall extends ethereum.Call {
  get inputs(): DelegateBySigCall__Inputs {
    return new DelegateBySigCall__Inputs(this);
  }

  get outputs(): DelegateBySigCall__Outputs {
    return new DelegateBySigCall__Outputs(this);
  }
}

export class DelegateBySigCall__Inputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DelegateBySigCall__Outputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }
}

export class DisputeCall extends ethereum.Call {
  get inputs(): DisputeCall__Inputs {
    return new DisputeCall__Inputs(this);
  }

  get outputs(): DisputeCall__Outputs {
    return new DisputeCall__Outputs(this);
  }
}

export class DisputeCall__Inputs {
  _call: DisputeCall;

  constructor(call: DisputeCall) {
    this._call = call;
  }

  get keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisputeCall__Outputs {
  _call: DisputeCall;

  constructor(call: DisputeCall) {
    this._call = call;
  }
}

export class IsBondedKeeperCall extends ethereum.Call {
  get inputs(): IsBondedKeeperCall__Inputs {
    return new IsBondedKeeperCall__Inputs(this);
  }

  get outputs(): IsBondedKeeperCall__Outputs {
    return new IsBondedKeeperCall__Outputs(this);
  }
}

export class IsBondedKeeperCall__Inputs {
  _call: IsBondedKeeperCall;

  constructor(call: IsBondedKeeperCall) {
    this._call = call;
  }

  get keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bond(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get minBond(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get earned(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get age(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class IsBondedKeeperCall__Outputs {
  _call: IsBondedKeeperCall;

  constructor(call: IsBondedKeeperCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IsKeeperCall extends ethereum.Call {
  get inputs(): IsKeeperCall__Inputs {
    return new IsKeeperCall__Inputs(this);
  }

  get outputs(): IsKeeperCall__Outputs {
    return new IsKeeperCall__Outputs(this);
  }
}

export class IsKeeperCall__Inputs {
  _call: IsKeeperCall;

  constructor(call: IsKeeperCall) {
    this._call = call;
  }

  get keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class IsKeeperCall__Outputs {
  _call: IsKeeperCall;

  constructor(call: IsKeeperCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IsMinKeeperCall extends ethereum.Call {
  get inputs(): IsMinKeeperCall__Inputs {
    return new IsMinKeeperCall__Inputs(this);
  }

  get outputs(): IsMinKeeperCall__Outputs {
    return new IsMinKeeperCall__Outputs(this);
  }
}

export class IsMinKeeperCall__Inputs {
  _call: IsMinKeeperCall;

  constructor(call: IsMinKeeperCall) {
    this._call = call;
  }

  get keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minBond(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get earned(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get age(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class IsMinKeeperCall__Outputs {
  _call: IsMinKeeperCall;

  constructor(call: IsMinKeeperCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class ReceiptCall extends ethereum.Call {
  get inputs(): ReceiptCall__Inputs {
    return new ReceiptCall__Inputs(this);
  }

  get outputs(): ReceiptCall__Outputs {
    return new ReceiptCall__Outputs(this);
  }
}

export class ReceiptCall__Inputs {
  _call: ReceiptCall;

  constructor(call: ReceiptCall) {
    this._call = call;
  }

  get credit(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get keeper(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReceiptCall__Outputs {
  _call: ReceiptCall;

  constructor(call: ReceiptCall) {
    this._call = call;
  }
}

export class ReceiptETHCall extends ethereum.Call {
  get inputs(): ReceiptETHCall__Inputs {
    return new ReceiptETHCall__Inputs(this);
  }

  get outputs(): ReceiptETHCall__Outputs {
    return new ReceiptETHCall__Outputs(this);
  }
}

export class ReceiptETHCall__Inputs {
  _call: ReceiptETHCall;

  constructor(call: ReceiptETHCall) {
    this._call = call;
  }

  get keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReceiptETHCall__Outputs {
  _call: ReceiptETHCall;

  constructor(call: ReceiptETHCall) {
    this._call = call;
  }
}

export class RemoveJobCall extends ethereum.Call {
  get inputs(): RemoveJobCall__Inputs {
    return new RemoveJobCall__Inputs(this);
  }

  get outputs(): RemoveJobCall__Outputs {
    return new RemoveJobCall__Outputs(this);
  }
}

export class RemoveJobCall__Inputs {
  _call: RemoveJobCall;

  constructor(call: RemoveJobCall) {
    this._call = call;
  }

  get job(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveJobCall__Outputs {
  _call: RemoveJobCall;

  constructor(call: RemoveJobCall) {
    this._call = call;
  }
}

export class RemoveLiquidityFromJobCall extends ethereum.Call {
  get inputs(): RemoveLiquidityFromJobCall__Inputs {
    return new RemoveLiquidityFromJobCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityFromJobCall__Outputs {
    return new RemoveLiquidityFromJobCall__Outputs(this);
  }
}

export class RemoveLiquidityFromJobCall__Inputs {
  _call: RemoveLiquidityFromJobCall;

  constructor(call: RemoveLiquidityFromJobCall) {
    this._call = call;
  }

  get liquidity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get job(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveLiquidityFromJobCall__Outputs {
  _call: RemoveLiquidityFromJobCall;

  constructor(call: RemoveLiquidityFromJobCall) {
    this._call = call;
  }
}

export class RemoveVotesCall extends ethereum.Call {
  get inputs(): RemoveVotesCall__Inputs {
    return new RemoveVotesCall__Inputs(this);
  }

  get outputs(): RemoveVotesCall__Outputs {
    return new RemoveVotesCall__Outputs(this);
  }
}

export class RemoveVotesCall__Inputs {
  _call: RemoveVotesCall;

  constructor(call: RemoveVotesCall) {
    this._call = call;
  }

  get voter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveVotesCall__Outputs {
  _call: RemoveVotesCall;

  constructor(call: RemoveVotesCall) {
    this._call = call;
  }
}

export class ResolveCall extends ethereum.Call {
  get inputs(): ResolveCall__Inputs {
    return new ResolveCall__Inputs(this);
  }

  get outputs(): ResolveCall__Outputs {
    return new ResolveCall__Outputs(this);
  }
}

export class ResolveCall__Inputs {
  _call: ResolveCall;

  constructor(call: ResolveCall) {
    this._call = call;
  }

  get keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ResolveCall__Outputs {
  _call: ResolveCall;

  constructor(call: ResolveCall) {
    this._call = call;
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class RevokeLiquidityCall extends ethereum.Call {
  get inputs(): RevokeLiquidityCall__Inputs {
    return new RevokeLiquidityCall__Inputs(this);
  }

  get outputs(): RevokeLiquidityCall__Outputs {
    return new RevokeLiquidityCall__Outputs(this);
  }
}

export class RevokeLiquidityCall__Inputs {
  _call: RevokeLiquidityCall;

  constructor(call: RevokeLiquidityCall) {
    this._call = call;
  }

  get liquidity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeLiquidityCall__Outputs {
  _call: RevokeLiquidityCall;

  constructor(call: RevokeLiquidityCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class SetKeep3rHelperCall extends ethereum.Call {
  get inputs(): SetKeep3rHelperCall__Inputs {
    return new SetKeep3rHelperCall__Inputs(this);
  }

  get outputs(): SetKeep3rHelperCall__Outputs {
    return new SetKeep3rHelperCall__Outputs(this);
  }
}

export class SetKeep3rHelperCall__Inputs {
  _call: SetKeep3rHelperCall;

  constructor(call: SetKeep3rHelperCall) {
    this._call = call;
  }

  get _kprh(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetKeep3rHelperCall__Outputs {
  _call: SetKeep3rHelperCall;

  constructor(call: SetKeep3rHelperCall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get bonded(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get keeper(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnbondCall extends ethereum.Call {
  get inputs(): UnbondCall__Inputs {
    return new UnbondCall__Inputs(this);
  }

  get outputs(): UnbondCall__Outputs {
    return new UnbondCall__Outputs(this);
  }
}

export class UnbondCall__Inputs {
  _call: UnbondCall;

  constructor(call: UnbondCall) {
    this._call = call;
  }

  get bonding(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnbondCall__Outputs {
  _call: UnbondCall;

  constructor(call: UnbondCall) {
    this._call = call;
  }
}

export class UnbondLiquidityFromJobCall extends ethereum.Call {
  get inputs(): UnbondLiquidityFromJobCall__Inputs {
    return new UnbondLiquidityFromJobCall__Inputs(this);
  }

  get outputs(): UnbondLiquidityFromJobCall__Outputs {
    return new UnbondLiquidityFromJobCall__Outputs(this);
  }
}

export class UnbondLiquidityFromJobCall__Inputs {
  _call: UnbondLiquidityFromJobCall;

  constructor(call: UnbondLiquidityFromJobCall) {
    this._call = call;
  }

  get liquidity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get job(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UnbondLiquidityFromJobCall__Outputs {
  _call: UnbondLiquidityFromJobCall;

  constructor(call: UnbondLiquidityFromJobCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get bonding(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WorkReceiptCall extends ethereum.Call {
  get inputs(): WorkReceiptCall__Inputs {
    return new WorkReceiptCall__Inputs(this);
  }

  get outputs(): WorkReceiptCall__Outputs {
    return new WorkReceiptCall__Outputs(this);
  }
}

export class WorkReceiptCall__Inputs {
  _call: WorkReceiptCall;

  constructor(call: WorkReceiptCall) {
    this._call = call;
  }

  get keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WorkReceiptCall__Outputs {
  _call: WorkReceiptCall;

  constructor(call: WorkReceiptCall) {
    this._call = call;
  }
}

export class WorkedCall extends ethereum.Call {
  get inputs(): WorkedCall__Inputs {
    return new WorkedCall__Inputs(this);
  }

  get outputs(): WorkedCall__Outputs {
    return new WorkedCall__Outputs(this);
  }
}

export class WorkedCall__Inputs {
  _call: WorkedCall;

  constructor(call: WorkedCall) {
    this._call = call;
  }

  get keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WorkedCall__Outputs {
  _call: WorkedCall;

  constructor(call: WorkedCall) {
    this._call = call;
  }
}
